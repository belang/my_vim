extends verilog

snippet typee
	typedef enum logic [${2}:0] {${3}} ${1};

# Sequential logic
snippet alfa
	always_ff @(posedge ${1:clk} or negedge rst_n) begin ${2:: statement_label}
		${3}
	end $2

snippet assp
	assert property (@(posedge ${1:clk} ${0});

snippet fsm
	typedef enum logic [${2}:0] {IDLE; ${3}} E_${1:fsm};
	E_${1}   ${1}_cs, ${1}_ns;
	always_ff @(posedge clk or negedge rst_n) begin : ${1}_transfer
	    if (!rst_n) begin
	        ${1}_cs <= IDLE;
	    end else begin
	        if (${4}) begin
	            ${1}_cs <= ${1}_ns;
	        end
	    end
	end : ${1}_transfer
	
	always_comb begin : ${1}_condition
	    ${1}_ns <= ${1}_cs;
	    unique case (${1}_cs)
	        IDLE: begin
	            ${1}_ns = NEXT;
	        end
	        default: begin
	            ${1}_ns = IDLE;
	        end
	    endcase
	end : ${1}_condition

snippet reg_inc_s
	always_ff @(posedge clk or negedge rst_n) begin  // increment
		if (${1:set}) begin
		    ${2:reg} <= ${3:set_valud};
		end else if (${4:inc_en}) begin
		    ${2} <= ${2} + 'b1;
		end
end

snippet m_revert
	for (int i = 0; i < ${1:length}; i++) begin  // revert bit
		${2}[i] = ${3}[$1-i];
	end
end


